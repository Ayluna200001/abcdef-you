#include <iostream>
using namespace std;
int main();
{
int a,b;
cout<<"number";
cin>>a;
cout<<"number";
cin>>b;
return 0;
После немалых проб и ошибок я обнаружил, что люди, которые испытывают проблемы с написанием кода, не просто борются с большими проблемами, или даже с небольшими проблемами (например, создают реализацию связанного списка). Они испытывают проблемы с решением крошечных задачек.

Поэтому я решил разработать вопросы, которые могут идентифицировать такого рода разработчиков, и придумал класс вопросов, который я называю «Вопросы FizzBuzz», в честь игры, в которую дети часто играют (или их заставляют играть) в школах Великобритании. Примером проблемы Fizz-Buzz является следующее:

Напишите программу, которая печатает числа от 1 до 100. Но для кратных трём значений «Fizz» вместо номера и для кратных пяти «Buzz». Для чисел, одновременно кратных трём и пяти — «FizzBuzz».

Большинство хороших программистов должны иметь возможность написать на бумаге программу, которая делает это за пару минут. Хотите знать что-то страшное? Большинство выпускников компьютерных наук не могут. Я также видел, что кандидаты на старшего программиста потратили более 10-15 минут, чтобы написать решение.
 
Дэн Кегель имел аналогичный опыт найма программистов начального уровня:


Удивительно большая доля претендентов, даже обладающих степенями магистра и докторов наук в области компьютерных наук, не справляются, кода их просят решить простейшие задачи программирования. Например, я лично опросил выпускников, которые не могут ответить «Напишите цикл, который считает от 1 до 10» или «Какой номер после F в шестнадцатеричной системе?» Менее тривиально я брал интервью у многих кандидатов, которые не могут использовать рекурсию для решения реальной проблемы. Это базовые навыки; любой, у кого их нет, вероятно, недостаточно много программировал.

Выступая от имени инженеров-программистов, которые должны взять интервью у потенциальных новых сотрудников, я могу с уверенностью сказать, что нам надоело разговаривать с кандидатами, которые в программировании ни в зуб ногой. Если вы можете успешно написать цикл, который идет от 1 до 10 на каждом языке вашего резюме, может сделать простую арифметику без калькулятора и может использовать рекурсию для решения реальной проблемы, вы уже опережаете многих!
